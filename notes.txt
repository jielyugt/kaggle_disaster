[Architecture]

<naive>
    sklearn.feature_extraction + sklearn.linear_model
    https://www.kaggle.com/philculliton/nlp-getting-started-tutorial

<word2vec + linear>
    pass the addition or concatenation of pre-tained word2vec vectors to a linear model
    an easy improvement from the naive method

<word2vec + CNN>
    run CNN with filters of difference window sizes on concatenation of pre-trained word2vec vectors
    https://arxiv.org/abs/1408.5882

<BERT>
    TODO

=================================================================

[Data Cleaning]

remove @
remove non-alphabetic tokens
remove stopwords
remove urls
TODO

=================================================================

[Loading word2vec]

wget https://s3.amazonaws.com/dl4j-distribution/GoogleNews-vectors-negative300.bin.gz
gunzip GoogleNews-vectors-negative300.bin.gz
import gensim
model = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary = True)

=================================================================

[Useful Links]

https://towardsdatascience.com/using-word2vec-to-analyze-news-headlines-and-predict-article-success-cdeda5f14751
https://www.kaggle.com/philculliton/nlp-getting-started-tutorial
https://github.com/Shawn1993/cnn-text-classification-pytorch/blob/master/model.py
